package org.itstep;

import java.util.Scanner;

import static java.lang.Math.hypot;

public class StaticMethods {
    /**
     * Освоив возможности конструкций ветвления, циклов и массивов, мы подошли к тому моменту, когда можем написать
     * любую программу. Однако подобные программы могут содержать массу повторяющегося кода и не могут быть повторно
     * использованы. Для решения этих задач существуют специальные инструменты. Наиболее простой из них - функции.
     * Функции - это выделенные, поименованные блоки кода, которые можно многократно вызывать в разных частях
     * программы.
     *
     * Java является языком программирования, максимально ориентированным на объектно-ориентированный код.
     * В явном виде функции в Java отсутствуют. Ближайшими аналогами функций в Java являются статические методы.
     * */

    //выделенный блок кода имеет несколько важных элементов
    //public - модификатор доступа, можно использовать для сокрытия метода
    //static - указывает компилятору, что метод не будет связан с объектом
    //void - указание на возвращаемое значение (void - отсутствие возвращаемого значения)
    //printHello - имя метода, которое будет необходимо для вызова метода
    // () - скобки показывают список параметров, необходимых данных, пустые скобки - нет необходимости в данных
    // { } - между фигурными скобками располагается код, который необходимо выполнить при вызове метода
    public static void printHello() {
        System.out.println("Hello Static Method!");
    }

    //метод, принимающий параметр
    //в круглых скобках мы перечисляем типы и внутренние названия параметров
    public static void printString(String s) { //String s  становится локальной переменной блока printString
        System.out.println(s);
    }

    //метод, принимающий несколько параметров
    public static void printStringCount(String s, int count) {
        for (int cnt = count; cnt !=0; --cnt)
            System.out.println(s);
    }

    /**
     * Немного терминологии
     * Метод - выделенный поименованный блок кода, котоый может быть исполнен как часть, команда, из другого кода
     * Сигнатура - название метода и набор его входящих параметров
     * Тело метода - блок кода, связанный с методом
     * Вызов - обращение к методу для выполнения блока кода, связанного с методом
     * Клиентский код - код, из которого производится вызов
     * API (Application Programming Interface) - набор методов класса, предназначенный для использования в клиентском коде
     * */

    public static void main(String[] args) {
        //вызов простейшего метода
        if (false) {
            printHello(); //при вызове необходимо указать имя метода и набор передаваемых данных
        }

        //вызов метода с параметром
        if (false) {
            printString("Hello Param!");
        }

        //вызов метода с несколькими параметрами
        if (false) {
            printStringCount("Name",10); //печатаем Name 10 раз
        }

        //каждый метод принадлежит классу, потому при вызове следует использовать имя класса
        if (false) {
            Scanner sc = new Scanner(System.in);
            double userNumber = sc.nextDouble();
            if (userNumber > 0.) {
                double res = Math.sqrt(userNumber); //вызываем статический метод sqrt из класса Math
                System.out.printf("%.4f = %2$.4f*%2$.4f"+System.lineSeparator(),userNumber,res);
            } else {
                System.out.println("Не могу извлечь корень из отрицательного числа");
            }
        }

        //в случае, если метод вызывается многократно, то можно использовать "импорт статического метода"
        //import static java.lang.Math.hypot;
        if (false) {
            Scanner sc = new Scanner(System.in);
            double x = sc.nextDouble(), y = sc.nextDouble();
            System.out.printf("Длина гипотенузы равна %.4f"+System.lineSeparator() + hypot(x,y));
        }
    }
}
